# -*- coding: utf-8 -*-
"""FER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LI79BWZfjJLLOzfGdeSBZEFigIRhm2o2
"""

!unzip -o /content/FER2013.zip -d /content/extracted/

import os

dataset_path = "/content/fer2013/fer2013"
train_path = os.path.join(dataset_path, "train")
test_path = os.path.join(dataset_path, "test")
print("Emotion categories:", os.listdir(train_path))

import os
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import ReduceLROnPlateau, TensorBoard, EarlyStopping
from tensorflow.keras.preprocessing.image import ImageDataGenerator

dataset_path = "/content/fer2013/fer2013"
train_path = os.path.join(dataset_path, "train")
test_path = os.path.join(dataset_path, "test")

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.3,
    height_shift_range=0.3,
    shear_range=0.3,
    zoom_range=0.3,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=32,
    color_mode="rgb",
    class_mode="sparse",
    subset="training"
)

val_generator = train_datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=32,
    color_mode="rgb",
    class_mode="sparse",
    subset="validation"
)

test_generator = test_datagen.flow_from_directory(
    test_path,
    target_size=(64, 64),
    batch_size=32,
    color_mode="rgb",
    class_mode="sparse"
)

base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(64, 64, 3))

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
x = layers.Dropout(0.5)(x)
predictions = Dense(7, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)
for layer in base_model.layers[:143]:
    layer.trainable = False

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

# Callbacks
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=1e-6)
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Train the model
history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=50,
    callbacks=[lr_scheduler, early_stopping, TensorBoard(log_dir='./logs')]
)

for layer in base_model.layers:
    layer.trainable = True
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history_finetuned = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=50,
    callbacks=[lr_scheduler, early_stopping, TensorBoard(log_dir='./logs')]
)

model.save("ferplus_trained_improved.h5")

test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc:.2f}")

from tensorflow.keras.models import load_model

model = load_model('ferplus_trained_improved.h5')

import cv2
import numpy as np
import matplotlib.pyplot as plt

def preprocess_image(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    img_resized = cv2.resize(img, (64, 64))
    img_resized = img_resized.astype('float32') / 255.0
    img_rgb = np.stack([img_resized] * 3, axis=-1)
    img_input = np.expand_dims(img_rgb, axis=0)

    return img_input
image_path = '/content/fer2013/fer2013/train/fear/Training_10133194.jpg'

img_input = preprocess_image(image_path)

img = cv2.imread(image_path)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

emotion_labels = ['Anger', 'Disgust', 'Fear', 'Happiness', 'Sadness', 'Surprise', 'Neutral']

pred = model.predict(img_input)

emotion = np.argmax(pred)

print(f"Predicted Emotion: {emotion_labels[emotion]}")